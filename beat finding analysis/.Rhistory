data_tapiso <- read_csv("data/tap-data/regular/data/TapTrialISO.csv")
data_tapmusic <- read_csv("data/tap-data/regular/data/TapTrialMusic.csv")
data_tapiso
table(data_tapiso$parent_trial_id)
table(data_tapiso$participant_id)
table(data_tapiso$participant_id)
table(data_tapmusic$participant_id)
table(data_tapiso$response_id)
table(data_tapmusic$response_id)
colnames(data_tapiso)
data_trial = data_tapiso
data_trial$analysis[is.na(data_trial$analysis)] <- "{}"
data_trial_unpacked = unpack_json_column(data_trial, data_trial$analysis)
colnames(data_trial_unpacked)
data_trial_unpacked %>% select(vars)
colnames(data_trial_unpacked)
colnames(data_trial)
data_trial %>% select(
id, participant_id, trial_id, node_id, network_id, trial_maker_id, trial_type,
definition, answer, analysis)
data_trial %>% select(
id, participant_id, node_id, network_id, trial_maker_id, trial_type,
definition, answer, analysis)
data_trial %>% select(
id, participant_id, node_id, network_id, trial_maker_id,
definition, answer, analysis)
x = data_trial %>% select(
id, participant_id, node_id, network_id, trial_maker_id,
definition, answer, analysis)
View(x)
{"stim_name": "iso_600ms", "list_iois": [600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600]}
{"origin": "AudioRecordControl", "supports_record_trial": true, "asset_id": 19, "url": "/static/assets/experiments/tapping-experiment__mode%3Ddebug__launch%3D2025-03-30--20-49-49/ISO_tapping/participants/participant_1/node_3__trial_1__trial_main_page__373142f5-20ce-4b32-b2c7-d1677c7c50e4.wav", "duration_sec": 40.05002267573696}
x = data_trial %>% select(
id, participant_id, node_id, network_id, trial_maker_id, analysis)
x
data_trial_select = data_trial %>% select(
id, participant_id, node_id, network_id, trial_maker_id, analysis)
data_trial_select$analysis[is.na(data_trial_select$analysis)] <- "{}"
data_trial_unpacked = unpack_json_column(data_trial_select, data_trial_select$analysis)
data_trial_unpacked
View(data_trial_unpacked)
{"num_markers_onsets": 6, "num_markers_detected": 6, "num_markers_missed": 0, "markers_max_difference": 1.3863121005997527, "markers_status": "Good", "markers_ok": true, "num_stim_raw_all": 50.0, "num_stim_aligned_all": 50, "num_resp_raw_all": 49.0, "num_resp_aligned_all": 49, "mean_async_all": -23.617810760668473, "sd_async_all": 31.173763027519687, "ratio_resp_to_stim": 98.0, "percent_resp_aligned_all": 97.99980400039199, "num_of_bad_taps": 0.0, "percent_of_bad_taps_all": 0, "num_resp_aligned_played": 49, "num_stim_aligned_played": 50, "mean_async_played": -23.617810760668473, "sd_async_played": 31.173763027519687, "percent_response_aligned_played": 97.99980400039199, "num_resp_aligned_notplayed": 0, "num_stim_aligned_notplayed": 0, "mean_async_notplayed": 999.0, "sd_async_notplayed": 999.0, "percent_response_aligned_notplayed": 0.0}
data_trial_select = data_trial %>% select(
id, participant_id, node_id, network_id, trial_maker_id,
analysis_raw = analysis)
data_trial_select
data_trial_select$analysis_raw[is.na(data_trial_select$analysis_raw)] <- "{}"
data_trial_unpacked = unpack_json_column(data_trial_select, data_trial_select$analysis_raw)
{"stim_onsets_input": [4600.0, 5200.0, 5800.0, 6400.0, 7000.0, 7600.0, 8200.0, 8800.0, 9400.0, 10000.0, 10600.0, 11200.0, 11800.0, 12400.0, 13000.0, 13600.0, 14200.0, 14800.0, 15400.0, 16000.0, 16600.0, 17200.0, 17800.0, 18400.0, 19000.0, 19600.0, 20200.0, 20800.0, 21400.0, 22000.0, 22600.0, 23200.0, 23800.0, 24400.0, 25000.0, 25600.0, 26200.0, 26800.0, 27400.0, 28000.0, 28600.0, 29200.0, 29800.0, 30400.0, 31000.0, 31600.0, 32200.0, 32800.0, 33400.0, 34000.0], "stim_onsets_detected": [4694.55, 5294.55, 5894.55, 6494.55, 7094.55, 7694.55, 8294.55, 8894.55, 9494.55, 10094.55, 10694.55, 11294.55, 11894.55, 12494.55, 13094.55, 13694.55, 14294.55, 14894.55, 15494.55, 16094.55, 16694.55, 17294.55, 17894.55, 18494.55, 19094.55, 19694.55, 20294.55, 20894.55, 21494.55, 22094.55, 22694.55, 23294.55, 23894.55, 24494.55, 25094.55, 25694.55, 26294.55, 26894.55, 27494.55, 28094.55, 28694.55, 29294.55, 29894.55, 30494.55, 31094.55, 31694.55, 32294.55, 32894.55, 33494.55, 34094.55], "stim_onsets_aligned": [NaN, 5294.55, 5894.55, 6494.55, 7094.55, 7694.55, 8294.55, 8894.55, 9494.55, 10094.55, 10694.55, 11294.55, 11894.55, 12494.55, 13094.55, 13694.55, 14294.55, 14894.55, 15494.55, 16094.55, 16694.55, 17294.55, 17894.55, 18494.55, 19094.55, 19694.55, 20294.55, 20894.55, 21494.55, 22094.55, 22694.55, 23294.55, 23894.55, 24494.55, 25094.55, 25694.55, 26294.55, 26894.55, 27494.55, 28094.55, 28694.55, 29294.55, 29894.55, 30494.55, 31094.55, 31694.55, 32294.55, 32894.55, 33494.55, 34094.55], "stim_ioi": [NaN, NaN, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0], "resp_onsets_detected": [5432.73, 5876.59, 6451.36, 7083.41, 7695.0, 8292.27, 8881.36, 9450.0, 10020.68, 10650.68, 11268.41, 11857.5, 12481.36, 13045.91, 13661.59, 14269.09, 14856.14, 15459.55, 16071.14, 16656.14, 17273.86, 17852.73, 18497.05, 19096.36, 19705.91, 20276.59, 20865.68, 21475.23, 22068.41, 22671.82, 23275.23, 23843.86, 24410.45, 25058.86, 25676.59, 26273.86, 26891.59, 27486.82, 28086.14, 28671.14, 29274.55, 29847.27, 30430.23, 31062.27, 31620.68, 32262.95, 32886.82, 33504.55, 34067.05], "resp_onsets_aligned": [NaN, 5432.73, 5876.59, 6451.36, 7083.41, 7695.0, 8292.27, 8881.36, 9450.0, 10020.68, 10650.68, 11268.41, 11857.5, 12481.36, 13045.91, 13661.59, 14269.09, 14856.14, 15459.55, 16071.14, 16656.14, 17273.86, 17852.73, 18497.05, 19096.36, 19705.91, 20276.59, 20865.68, 21475.23, 22068.41, 22671.82, 23275.23, 23843.86, 24410.45, 25058.86, 25676.59, 26273.86, 26891.59, 27486.82, 28086.14, 28671.14, 29274.55, 29847.27, 30430.23, 31062.27, 31620.68, 32262.95, 32886.82, 33504.55, 34067.05], "resp_ioi": [NaN, NaN, 443.86, 574.77, 632.05, 611.59, 597.27, 589.09, 568.64, 570.68, 630.0, 617.73, 589.09, 623.86, 564.55, 615.68, 607.5, 587.05, 603.41, 611.59, 585.0, 617.73, 578.86, 644.32, 599.32, 609.55, 570.68, 589.09, 609.55, 593.18, 603.41, 603.41, 568.64, 566.59, 648.41, 617.73, 597.27, 617.73, 595.23, 599.32, 585.0, 603.41, 572.73, 582.95, 632.05, 558.41, 642.27, 623.86, 617.73, 562.5], "resp_stim_asynch": [NaN, 138.18, -17.95, -43.18, -11.14, 0.45, -2.27, -13.18, -44.55, -73.86, -43.86, -26.14, -37.05, -13.18, -48.64, -32.95, -25.45, -38.41, -35.0, -23.41, -38.41, -20.68, -41.82, 2.5, 1.82, 11.36, -17.95, -28.86, -19.32, -26.14, -22.73, -19.32, -50.68, -84.09, -35.68, -17.95, -20.68, -2.95, -7.73, -8.41, -23.41, -20.0, -47.27, -64.32, -32.27, -73.86, -31.59, -7.73, 10.0, -27.5], "markers_onsets_input": [2000.0, 2280.0, 2510.0, 36050.02, 36330.02, 36560.02], "markers_onsets_detected": [2094.55, 2374.77, 2605.91, 36143.18, 36425.45, 36654.55], "markers_onsets_aligned": [2094.55, 2374.55, 2604.55, 36144.57, 36424.57, 36654.57], "first_marker_detected": 2094.55}
# Unpack JSON dictionary stored in analysis
data_trial_unpacked$analysis[is.na(data_trial_unpacked$analysis)] <- "{}"
data_trial_re_unpacked = unpack_json_column(data_trial_unpacked, data_trial_unpacked$analysis)
View(data_trial_re_unpacked)
colnames(data_trial_re_unpacked)
# Function to prepare data
prepare_trial_data <- function(data_trial) {
data_trial_select = data_trial %>% select(
id, participant_id, node_id, network_id, trial_maker_id,
analysis_raw = analysis)
# Unpack JSON dictionary stored in analysis_raw
data_trial_select$analysis_raw[is.na(data_trial_select$analysis_raw)] <- "{}"
data_trial_unpacked = unpack_json_column(data_trial_select, data_trial_select$analysis_raw)
# Unpack JSON dictionary stored in analysis
data_trial_unpacked$analysis[is.na(data_trial_unpacked$analysis)] <- "{}"
final_data = unpack_json_column(data_trial_unpacked, data_trial_unpacked$analysis)
return(final_data)
}
data_tapiso <- prepare_trial_data(data_tapiso)
data_tapiso
final_data <- data_trial_re_unpacked %>% select(-analysis_raw, -analysis)
final_data
final_data <- data_trial_re_unpacked %>%
# remove columns I don't want
select(-analysis_raw, -analysis)
final_data
final_data <- data_trial_re_unpacked %>%
# remove columns I don't want
select(-analysis_raw, -analysis, -num_markers_onsets:-markers_max_difference)
final_data
final_data <- data_trial_re_unpacked %>%
# remove columns I don't want
select(-analysis_raw, -analysis, -num_markers_onsets:-markers_status)
final_data
# Function to prepare data
prepare_trial_data <- function(data_trial) {
data_trial_select = data_trial %>%
# select only columns I want
select(
id, participant_id, node_id, network_id, trial_maker_id,
analysis_raw = analysis
)
# Unpack JSON dictionary stored in analysis_raw
data_trial_select$analysis_raw[is.na(data_trial_select$analysis_raw)] <- "{}"
data_trial_unpacked = unpack_json_column(data_trial_select, data_trial_select$analysis_raw)
# Unpack JSON dictionary stored in analysis
data_trial_unpacked$analysis[is.na(data_trial_unpacked$analysis)] <- "{}"
data_trial_re_unpacked = unpack_json_column(data_trial_unpacked, data_trial_unpacked$analysis)
final_data <- data_trial_re_unpacked %>%
# remove columns I don't want
select(-analysis_raw, -analysis, -num_markers_onsets:-markers_status)
return(final_data)
}
# Load data
data_tapiso_raw <- read_csv("data/tap-data/regular/data/TapTrialISO.csv")
data_tapmusic_raw <- read_csv("data/tap-data/regular/data/TapTrialMusic.csv")
table(data_tapiso_raw$participant_id)
table(data_tapmusic_raw$participant_id)
# apply function to convert raw data into data ready for analysis
data_tapiso <- prepare_trial_data(data_tapiso_raw)
data_tapmusic <- prepare_trial_data(data_tapmusic_raw)
data_tapiso
data_tapmusic
data_tapiso
data_tapiso
data_tapmusic
data_tapiso
data_tapmusic
# Join the two datasets by participant id
data_tap <- full_join(data_tapiso, data_tapmusic, by = "participant_id")
data_tap
16*2
data_tapiso
data_tapmusic
# Join the two datasets by participant id
data_tap <- tibble((rbind(data_tapiso, data_tapmusic))
)
# Join the two datasets by participant id
data_tap <- tibble(rbind(data_tapiso, data_tapmusic))
data_tap
# apply function to convert raw data into data ready for analysis
data_tapiso <- prepare_trial_data(data_tapiso_raw) %>%
mutate(trial_type = "iso", id = paste("iso", id, sep = "_"))
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "iso", id = paste("music", id, sep = "_"))
data_tapmusic
data_tapiso
# Join the two datasets by participant id
data_tap <- tibble(rbind(data_tapiso, data_tapmusic))
data_tap
data_tap %>%
group_by(participant_id, trial_type) %>%
summarise(n = n(), sd_async_notplayed = mean(sd_async_notplayed))
# Load data
data_tapiso_raw <- read_csv("data/tap-data/regular/data/TapTrialISO.csv")
data_tapmusic_raw <- read_csv("data/tap-data/regular/data/TapTrialMusic.csv")
table(data_tapiso_raw$participant_id)
table(data_tapmusic_raw$participant_id)
# apply function to convert raw data into data ready for analysis
data_tapiso <- prepare_trial_data(data_tapiso_raw) %>%
mutate(trial_type = "iso", id = paste(id, "iso", sep = "_"))
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "music", id = paste(id, "music", sep = "_"))
# Join the two datasets by participant id
data_tap <- tibble(rbind(data_tapiso, data_tapmusic))
data_tap %>%
group_by(participant_id, trial_type) %>%
summarise(n = n(), sd_async_notplayed = mean(sd_async_notplayed))
data_tap %>%
group_by(participant_id, trial_type) %>%
summarise(n = n(), sd_async_played = mean(sd_async_notplayed))
data_tap %>%
select(participant_id, trial_type, sd_async_notplayed)
data_tap %>%
select(participant_id, trial_type, sd_async_played)
data_tap %>%
group_by(participant_id, trial_type) %>%
summarise(n = n(), sd_async_played = mean(sd_async_played))
# Load libraries
library(tidyverse)
# Load functions
source("utils/utils.R")
# Load data
data_tapiso_raw <- read_csv("data/tap-data/TapTrialISO.csv")
data_tapmusic_raw <- read_csv("data/tap-data/TapTrialMusic.csv")
table(data_tapiso_raw$participant_id)
table(data_tapmusic_raw$participant_id)
# apply function to convert raw data into data ready for analysis
data_tapiso <- prepare_trial_data(data_tapiso_raw) %>%
mutate(trial_type = "iso", id = paste(id, "iso", sep = "_"))
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "music", id = paste(id, "music", sep = "_"))
# Join the two datasets by participant id
data_tap <- tibble(rbind(data_tapiso, data_tapmusic))
data_tap
# apply function to convert raw data into data ready for analysis
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "music", id = paste(id, "music", sep = "_"))
# Parse and sort JSON data
sort_json <- function(x) {
jsonlite::stream_in(textConnection(gsub("\\n", "", x)))
}
################################################################################
# Script: Prepare data for analysis
################################################################################
# Load libraries
library(tidyverse)
# Load functions
source("utils/utils.R")
# Load data
data_tapmusic_raw <- read_csv("data/tap-data/TapTrialMusic.csv")
table(data_tapmusic_raw$participant_id)
# apply function to convert raw data into data ready for analysis
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "music", id = paste(id, "music", sep = "_"))
View(data_tapmusic_raw)
View(data_tapmusic_raw)
################################################################################
# Script: Prepare data for analysis
################################################################################
# Load libraries
library(tidyverse)
# Load functions
source("utils/utils.R")
# Load data
data_tapmusic_raw <- read_csv("data/tap-data/TapTrialMusic.csv")
table(data_tapmusic_raw$participant_id)
# apply function to convert raw data into data ready for analysis
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "music", id = paste(id, "music", sep = "_"))
View(data_tapmusic)
View(data_tapmusic)
View(data_tapmusic)
View(data_tapmusic)
# Load required libraries
library(tidyverse)
# Convert string into numeric vectors
data_tapmusic_clean <- data_tapmusic %>%
mutate(
tap_onsets = map(resp_onsets_detected, ~
as.numeric(str_extract_all(.x, "\\d+\\.?\\d*")[[1]])
)
)
View(data_tapmusic_clean)
# Load required libraries
library(tidyverse)
# Convert string into numeric vectors
data_tapmusic_clean <- data_tapmusic %>%
mutate(
tap_onsets = map(resp_onsets_detected, ~
as.numeric(str_extract_all(.x, "\\d+\\.?\\d*")[[1]])
)
)
tap_long <- data_tapmusic_clean %>%
select(participant_id, id, tap_onsets) %>%
unnest(tap_onsets) %>%
mutate(tap_onsets = as.numeric(tap_onsets))
View(tap_long)
library(tidyverse)
# Step 1: Expand the resp_onsets_detected column into long format
data_tapmusic_long <- data_tapmusic %>%
select(participant_id, id, resp_onsets_detected) %>%
mutate(resp_onsets_detected = map(resp_onsets_detected, ~ as.numeric(str_split(.x, ",", simplify = TRUE)))) %>%
unnest(resp_onsets_detected) %>%
mutate(resp_onsets_detected = as.numeric(resp_onsets_detected))
################################################################################
# Script: Prepare data for analysis
################################################################################
# Load libraries
library(tidyverse)
# Load functions
source("utils/utils.R")
# Load data
data_tapmusic_raw <- read_csv("data/tap-data/TapTrialMusic.csv")
table(data_tapmusic_raw$participant_id)
# apply function to convert raw data into data ready for analysis
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "music", id = paste(id, "music", sep = "_"))
library(tidyverse)
# Step 1: Expand the resp_onsets_detected column into long format
data_tapmusic_long <- data_tapmusic %>%
select(participant_id, id, resp_onsets_detected) %>%
mutate(resp_onsets_detected = map(resp_onsets_detected, ~ as.numeric(str_split(.x, ",", simplify = TRUE)))) %>%
unnest(resp_onsets_detected) %>%
mutate(resp_onsets_detected = as.numeric(resp_onsets_detected))
# Step 2: Plot
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected, y = factor(participant_id))) +
geom_point(alpha = 0.7) +
labs(
title = "Tapping onsets across participants",
x = "Time (ms)",
y = "Participant ID"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_density(fill = "blue", alpha = 0.3) +
labs(
title = "Density of tapping onsets across all trials",
x = "Time (ms)",
y = "Density"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_histogram(binwidth = 200, fill = "darkgreen", alpha = 0.6) +
facet_wrap(~ participant_id, scales = "free_y") +
labs(
title = "Histogram of tap times by participant",
x = "Time (ms)",
y = "Count"
) +
theme_minimal()
library(tidyverse)
# Step 1: Expand the resp_onsets_detected column into long format
data_tapmusic_long <- data_tapmusic %>%
select(participant_id, id, resp_onsets_detected) %>%
mutate(resp_onsets_detected = map(resp_onsets_detected, ~ as.numeric(str_split(.x, ",", simplify = TRUE)))) %>%
unnest(resp_onsets_detected) %>%
mutate(resp_onsets_detected = as.numeric(resp_onsets_detected))
# Step 2: Plot
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected, y = factor(participant_id))) +
geom_point(alpha = 0.7) +
labs(
title = "Tapping onsets across participants",
x = "Time (ms)",
y = "Participant ID"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_density(fill = "blue", alpha = 0.3) +
labs(
title = "Density of tapping onsets across all trials",
x = "Time (ms)",
y = "Density"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_histogram(binwidth = 200, fill = "darkgreen", alpha = 0.6) +
facet_wrap(~ participant_id, scales = "free_y") +
labs(
title = "Histogram of tap times by participant",
x = "Time (ms)",
y = "Count"
) +
theme_minimal()
library(jsonlite)
library(tidyverse)
# Parse the JSON string from the `output` column to extract "tapping_detected_onsets"
data_output_onsets <- data_tapmusic %>%
select(participant_id, id, output) %>%
mutate(
parsed_output = map(output, ~ fromJSON(.x)),
tapping_onsets = map(parsed_output, "tapping_detected_onsets")
) %>%
unnest(tapping_onsets) %>%
mutate(tapping_onsets = as.numeric(tapping_onsets))
ggplot(data_output_onsets, aes(x = tapping_onsets, y = factor(participant_id))) +
geom_point(alpha = 0.7, color = "darkred") +
labs(
title = "Tapping Onsets from `output` Column",
x = "Time (ms)",
y = "Participant ID"
) +
theme_minimal()
# Make resp_onsets version
resp_onsets_long <- data_tapmusic %>%
select(participant_id, id, resp_onsets_detected) %>%
mutate(resp_onsets_detected = map(resp_onsets_detected, ~ as.numeric(str_split(.x, ",", simplify = TRUE)))) %>%
unnest(resp_onsets_detected) %>%
mutate(source = "resp_detected", time = resp_onsets_detected)
# Combine both
taps_combined <- data_output_onsets %>%
mutate(source = "output", time = tapping_onsets) %>%
select(participant_id, id, source, time) %>%
bind_rows(resp_onsets_long %>% select(participant_id, id, source, time))
# Plot overlay
ggplot(taps_combined, aes(x = time, y = factor(participant_id), color = source)) +
geom_point(alpha = 0.7) +
labs(
title = "Comparison of Tap Onsets from `output` and `resp_onsets_detected`",
x = "Time (ms)",
y = "Participant ID",
color = "Source"
) +
theme_minimal()
################################################################################
# Script: Prepare data for analysis
################################################################################
# Load libraries
library(tidyverse)
# Load functions
source("utils/utils.R")
# Load data
data_tapmusic_raw <- read_csv("data/tap-data/TapTrialMusic.csv")
table(data_tapmusic_raw$participant_id)
# apply function to convert raw data into data ready for analysis
data_tapmusic <- prepare_trial_data(data_tapmusic_raw) %>%
mutate(trial_type = "music", id = paste(id, "music", sep = "_"))
library(tidyverse)
# Step 1: Expand the resp_onsets_detected column into long format
data_tapmusic_long <- data_tapmusic %>%
select(participant_id, id, resp_onsets_detected) %>%
mutate(resp_onsets_detected = map(resp_onsets_detected, ~ as.numeric(str_split(.x, ",", simplify = TRUE)))) %>%
unnest(resp_onsets_detected) %>%
mutate(resp_onsets_detected = as.numeric(resp_onsets_detected))
# Step 2: Plot
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected, y = factor(participant_id))) +
geom_point(alpha = 0.7) +
labs(
title = "Tapping onsets across participants",
x = "Time (ms)",
y = "Participant ID"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_density(fill = "blue", alpha = 0.3) +
labs(
title = "Density of tapping onsets across all trials",
x = "Time (ms)",
y = "Density"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_histogram(binwidth = 200, fill = "darkgreen", alpha = 0.6) +
facet_wrap(~ participant_id, scales = "free_y") +
labs(
title = "Histogram of tap times by participant",
x = "Time (ms)",
y = "Count"
) +
theme_minimal()
library(jsonlite)
library(tidyverse)
# Parse the JSON string from the `output` column to extract "tapping_detected_onsets"
data_output_onsets <- data_tapmusic %>%
select(participant_id, id, output) %>%
mutate(
parsed_output = map(output, ~ fromJSON(.x)),
tapping_onsets = map(parsed_output, "tapping_detected_onsets")
) %>%
unnest(tapping_onsets) %>%
mutate(tapping_onsets = as.numeric(tapping_onsets))
ggplot(data_output_onsets, aes(x = tapping_onsets, y = factor(participant_id))) +
geom_point(alpha = 0.7, color = "darkred") +
labs(
title = "Tapping Onsets from `output` Column",
x = "Time (ms)",
y = "Participant ID"
) +
theme_minimal()
# Make resp_onsets version
resp_onsets_long <- data_tapmusic %>%
select(participant_id, id, resp_onsets_detected) %>%
mutate(resp_onsets_detected = map(resp_onsets_detected, ~ as.numeric(str_split(.x, ",", simplify = TRUE)))) %>%
unnest(resp_onsets_detected) %>%
mutate(source = "resp_detected", time = resp_onsets_detected)
# Combine both
taps_combined <- data_output_onsets %>%
mutate(source = "output", time = tapping_onsets) %>%
select(participant_id, id, source, time) %>%
bind_rows(resp_onsets_long %>% select(participant_id, id, source, time))
# Plot overlay
ggplot(taps_combined, aes(x = time, y = factor(participant_id), color = source)) +
geom_point(alpha = 0.7) +
labs(
title = "Comparison of Tap Onsets from `output` and `resp_onsets_detected`",
x = "Time (ms)",
y = "Participant ID",
color = "Source"
) +
theme_minimal()
library(tidyverse)
# Step 1: Expand the resp_onsets_detected column into long format
data_tapmusic_long <- data_tapmusic %>%
select(participant_id, id, resp_onsets_detected) %>%
mutate(resp_onsets_detected = map(resp_onsets_detected, ~ as.numeric(str_split(.x, ",", simplify = TRUE)))) %>%
unnest(resp_onsets_detected) %>%
mutate(resp_onsets_detected = as.numeric(resp_onsets_detected))
# Step 2: Plot
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected, y = factor(participant_id))) +
geom_point(alpha = 0.7) +
labs(
title = "Tapping onsets across participants",
x = "Time (ms)",
y = "Participant ID"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_density(fill = "blue", alpha = 0.3) +
labs(
title = "Density of tapping onsets across all trials",
x = "Time (ms)",
y = "Density"
) +
theme_minimal()
ggplot(data_tapmusic_long, aes(x = resp_onsets_detected)) +
geom_histogram(binwidth = 200, fill = "darkgreen", alpha = 0.6) +
facet_wrap(~ participant_id, scales = "free_y") +
labs(
title = "Histogram of tap times by participant",
x = "Time (ms)",
y = "Count"
) +
theme_minimal()
library(jsonlite)
library(tidyverse)
# Parse the JSON string from the `output` column to extract "tapping_detected_onsets"
data_output_onsets <- data_tapmusic %>%
select(participant_id, id, output) %>%
mutate(
parsed_output = map(output, ~ fromJSON(.x)),
tapping_onsets = map(parsed_output, "tapping_detected_onsets")
) %>%
unnest(tapping_onsets) %>%
mutate(tapping_onsets = as.numeric(tapping_onsets))
ggplot(data_output_onsets, aes(x = tapping_onsets, y = factor(participant_id))) +
geom_point(alpha = 0.7, color = "darkred") +
labs(
title = "Tapping Onsets from `output` Column",
x = "Time (ms)",
y = "Participant ID"
) +
theme_minimal()
